name: Build and deploy Spring app

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      chromadb:
        image: ghcr.io/chroma-core/chroma:0.4.15
        ports:
          - 8000:8000
        env:
          IS_PERSISTENT: FALSE
          ANONYMIZED_TELEMETRY: FALSE
        options: >-
          --health-cmd "curl -f http://chromadb:8000/api/v1/heartbeat || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Wait for ChromaDB to be ready
        run: timeout 60 bash -c 'until curl -f http://chromadb:8000/api/v1/heartbeat; do sleep 2; done'
          
      - name: Build the application
        run: mvn -B clean package
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ACCESS_EXPIRATION: ${{ vars.JWT_ACCESS_EXPIRATION }}
          JWT_REFRESH_EXPIRATION: ${{ vars.JWT_REFRESH_EXPIRATION }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          CHROMA_HOST: ${{ vars.CHROMA_HOST }}
          CHROMA_PORT: ${{ vars.CHROMA_PORT }}

      - name: Login to DockerHub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/shopshopday-image:latest
          platforms: linux/amd64

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.EC2_USERNAME }}/shopshopday
            
            # Create production environment variables
            cat > .env << EOF
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_ACCESS_EXPIRATION=${{ vars.JWT_ACCESS_EXPIRATION }}
            JWT_REFRESH_EXPIRATION=${{ vars.JWT_REFRESH_EXPIRATION }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            CHROMA_HOST=${{ vars.CHROMA_HOST }}
            CHROMA_PORT=${{ vars.CHROMA_PORT }}
            EOF
            
            # Pull latest Docker image
            docker pull ${{ secrets.DOCKER_USERNAME }}/shopshopday-image:latest
            
            # Stop existing containers
            docker-compose down
            
            # Start services
            docker-compose up -d
            
            # Clean up unused images
            docker image prune -f
